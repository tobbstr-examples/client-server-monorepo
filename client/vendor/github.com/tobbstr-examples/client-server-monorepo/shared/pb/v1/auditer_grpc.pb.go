// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: auditer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuditerClient is the client API for Auditer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditerClient interface {
	LastAccess(ctx context.Context, in *LastAccessRequest, opts ...grpc.CallOption) (*LastAccessResponse, error)
}

type auditerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditerClient(cc grpc.ClientConnInterface) AuditerClient {
	return &auditerClient{cc}
}

func (c *auditerClient) LastAccess(ctx context.Context, in *LastAccessRequest, opts ...grpc.CallOption) (*LastAccessResponse, error) {
	out := new(LastAccessResponse)
	err := c.cc.Invoke(ctx, "/tobbstr.helloworld.v1.Auditer/LastAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditerServer is the server API for Auditer service.
// All implementations must embed UnimplementedAuditerServer
// for forward compatibility
type AuditerServer interface {
	LastAccess(context.Context, *LastAccessRequest) (*LastAccessResponse, error)
	mustEmbedUnimplementedAuditerServer()
}

// UnimplementedAuditerServer must be embedded to have forward compatible implementations.
type UnimplementedAuditerServer struct {
}

func (UnimplementedAuditerServer) LastAccess(context.Context, *LastAccessRequest) (*LastAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastAccess not implemented")
}
func (UnimplementedAuditerServer) mustEmbedUnimplementedAuditerServer() {}

// UnsafeAuditerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditerServer will
// result in compilation errors.
type UnsafeAuditerServer interface {
	mustEmbedUnimplementedAuditerServer()
}

func RegisterAuditerServer(s grpc.ServiceRegistrar, srv AuditerServer) {
	s.RegisterService(&Auditer_ServiceDesc, srv)
}

func _Auditer_LastAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditerServer).LastAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tobbstr.helloworld.v1.Auditer/LastAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditerServer).LastAccess(ctx, req.(*LastAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auditer_ServiceDesc is the grpc.ServiceDesc for Auditer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auditer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tobbstr.helloworld.v1.Auditer",
	HandlerType: (*AuditerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastAccess",
			Handler:    _Auditer_LastAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auditer.proto",
}
